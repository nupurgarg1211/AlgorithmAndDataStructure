#include<iostream>
#include<vector>
#include<algorithm>
#include<stdio.h>
#include<cmath>
#include<string>
#include<cstdlib>
using namespace std;
struct Queue
{
	int front,rear,capacity,size;
	int *array;

};
struct Queue * CreateQueue(int capacity)
{
	struct Queue *q=new Queue();
	q->capacity=capacity;
	q->front=q->size=0;
	q->rear=capacity-1;
	q->array=new int(capacity);
	return q;
	
}
bool isFUll(Queue *q)
{
	if(q->size==q->capacity)
	return 1;
	else 0;

}
bool isEmpty(Queue *q)
{
	if(q->size==0)
	return 1;
	else
	return 0;

}
void enqueue(Queue * q,int data)
{
	if(isFUll(q))
	{
		cout<<"queue is full";
		return;
	}
	else
	{
		q->rear=(q->rear+1)%q->capacity;
		q->array[q->rear]=data;
		q->size++;	
	
	}	 
}
int dequeue(Queue * q)
{
	if(isEmpty(q))
	{
		cout<<"queue is Empty!!";
		return -1;
	}
	else
	{
		int a=q->array[q->front];
		q->front=(q->front+1)%q->capacity;
		q->size--;
		return a;	
	
	}	 


}
int front(Queue * q)
{	
	if(isEmpty(q))
	{
		return -1;
	}
	else
	return q->array[q->front];
}
int rear(Queue * q)
{
	if(isEmpty(q))
	{
		return -1;
	}
	else
	return q->array[q->rear];

}

int main()
{
	
	Queue *q=CreateQueue(500);
	
	enqueue(q,1);
	enqueue(q,2);
	enqueue(q,3);
	enqueue(q,4);
	int a=dequeue(q);
	cout<<"element poped="<<a<<endl;
	a=front(q);
	cout<<"element at front ="<<a<<endl;
	a=rear(q);
	cout<<"element at rear =" <<a<<endl;	
	return 0;	
}
