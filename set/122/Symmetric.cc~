#include<iostream>
#include<malloc.h>
#include<climits>
using namespace std;
struct Node
{
	int data;
	Node * left,*right;
};


Node * createNode(int key)
{
	Node * newNode=(Node *)malloc(sizeof(Node));
	newNode->data=key;
	newNode->left=NULL;
	newNode->right=NULL;
	return newNode;
}
/*void insertNode(int k,Node * root)
{
	if(root->left==NULL)
	{
		root->left=createNode(k,root);
	}
	else if(root->right==NULL)
	{
		root->right=createNode(k,root);
	}
	else
	{
		insertNode(k,root->left);
		if
	}

}*/
int printMaxWt(Node *root,int &MaxWt)
{
	int l,r;
	if(root==NULL)
	{
		return 0;
	}
	else
	{
		l=printMaxWt(root->left,MaxWt);
		r=printMaxWt(root->right,MaxWt);
		
	}
	if(l+r+root->data>MaxWt)
	{
		MaxWt=l+r+root->data;
	}
	return l+r+root->data;

}
void printTree(Node *root)
{
	if(root==NULL)
	{
		return;
	}
	else
	{
		cout<<root->data<<" ";
		printTree(root->left);
		printTree(root->right);
	}
}
bool CheckBTAsSymmetricUtil(Node *a, Node * b)
{
	if(a==NULL || b==NULL)
	{
		return (a==b);
	}
	else
	{
		return (CheckBTAsSymmetricUtil(a->left,b->right) &&
		CheckBTAsSymmetricUtil(a->right, b->left) && a->data==b->data);
	
	}
}
bool CheckBTAsSymmetric(Node *root)
{
	if(root==NULL)
	{
		return true;
	}
	else
	{
		return CheckBTAsSymmetricUtil(root->left,root->right);
	}

}
int main()
{
	Node * root=NULL;
	root=createNode(5);
	root->left=createNode(2);
	root->right=createNode(2);
	root->left->left=createNode(1);
	root->left->right=createNode(3);
	root->right->left=createNode(3);
	root->right->right=createNode(1);
	printTree(root);
	cout<<"Max wt=";
	int ans=printMaxWt(root,ans);
	cout<<ans<<endl;
	bool symmetric=CheckBTAsSymmetric(root);
	if(symmetric)
		cout<<"YES"<<endl;
	else
		cout<<"NO"<<endl;	
}
