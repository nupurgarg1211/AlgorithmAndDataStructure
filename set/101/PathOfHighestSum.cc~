/*Given a (nXm) matrix, with values present in each cell and a few in-accessible cells marked as -1, find the path from (0,0) to (n,m) with highest sum.*/
#include<iostream>
#include<bits/stdc++.h>
int const n=3,m=4;
using namespace std;
   // max(sum[i-1][j-1],sum[i-1][j],sum[i][j-1],x,y)
int max(int a,int b,int c,int & x,int &y)
{
	if(a>b)
	{
		if(a>c)
		{
			x=x-1;
			y=y-1;
			return a;
		}
		else
		{
			x=x;
			y=y-1;
			return c;
		}
		//return a>c?x=x-1,y=y-1,a:x=x,y=y-1,c;
	
	}
	else
	{
		if(b>c)
		{
			x=x-1;
			y=y;
			return b;
		}
		else
		{
			x=x;
			y=y-1;
			return c;
		
		}
		//return b>c?x=x-1,y=y,b:x=x,y=y-1,c;
	}
	

}
void print(int a[][m])
{
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<m;j++)
		{
			cout<<a[i][j]<<" ";
		}
		cout<<endl;
	}
} 
int calculateMaxSum(int matrix[][m])
{
	int sum[n][m];
	sum[0][0]=matrix[0][0];
	//cout<<sum[][]<<endl;
	for(int i=1;i<n;i++)
	{
		if(matrix[i][0]!=-1)
		{
			if(sum[i-1][0]!=-1)
			sum[i][0]=sum[i-1][0]+matrix[i][0];
			else
			sum[i][0]=matrix[i][0];
		}
		else
		sum[i][0]=-1;
	
	}
	for(int i=1;i<m;i++)
	{
		if(matrix[0][i]!=-1)
		{
			if(sum[0][i-1]!=-1)
			sum[0][i]=sum[0][i-1]+matrix[0][i];
			else
			sum[0][i]=matrix[0][i];
		}
		else
		sum[0][i]=-1;
	
	
	}
	/*cout<<"col"<<endl;
	for(int i=0;i<n;i++)
	{
		cout<<sum[i][0]<<endl;
	}
	cout<<"row"<<endl;
	for(int i=0;i<m;i++)
	{
		cout<<sum[0][i]<<endl;
	}*/
	int x,y;
	vector<pair<int,int> > path;
	for(int i=1;i<n;i++)
	{
		for(int j=1;j<m;j++)
		{
			x=i;
			y=j;
			if(matrix[i][j]!=-1)
			{
				sum[i][j]=max(sum[i-1][j-1],sum[i-1][j],sum[i][j-1],x,y)+matrix[i][j];
				path.push_back(make_pair(x,y));
				cout<<"x and y="<<x<<" "<<y<<" "<<max(sum[i-1][j-1],sum[i-1][j],sum[i][j-1],x,y)<<endl;
			}
			else
			sum[i][j]=-1;
		}
	}
	print(sum);
	for(int i=0;i<path.size();i++)
	{
		cout<<path[i].first<<" "<<path[i].second<<endl;
	}
	
	return sum[n-1][m-1];
}
int main()
{
	int matrix[3][4]={
				{1,2,3,-1},
				{-1,2,5,3},
				{2,-1,-1,4}
	
	
	};
	int maxSumOfPath=calculateMaxSum(matrix);
	//printPath();
	return 0;
}
