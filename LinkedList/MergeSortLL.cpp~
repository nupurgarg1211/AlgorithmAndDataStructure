#include<iostream>
#include<vector>
#include<algorithm>
#include<stdio.h>
#include<cmath>
#include<string>
#include<cstdlib>
using namespace std;

class Node
{
	int val;
	Node *next;
	public:
	Node();
	Node(int val);
	~Node();
	void setValue(int value);
	void setNext(Node *next);
	Node* getNext();
	int getValue();
	
};
Node::Node()
{
	next=NULL;
}
Node::Node(int value)
{
	val=value;
	next=NULL;

}
Node::~Node()
{
	delete next;
}
void Node:: setValue(int value)
{
	val=value;
}
void Node:: setNext(Node *next1)
{

	next=next1;

}
int Node:: getValue()
{
	return val;

}
Node* Node:: getNext()
{

	return next;
}
class LinkedList
{
	Node *head;
	public:
	
	LinkedList();
	~LinkedList();
	Node * getHead();
	void setHead(Node *head);
	Node* insert(int val,int pos);
	void TraverseLL();
	void MergeSort(Node **head);
	void splitList(Node *head,Node ** a,Node ** b);
	Node * mergeList(Node *a,Node *b);
	
};
LinkedList::LinkedList()
{
	head=NULL;
}
LinkedList::~LinkedList()
{
	delete head;
}

Node * LinkedList:: getHead()
{
	return head;
}
void LinkedList::setHead(Node *head1)
{
	head=head1;
}
Node* LinkedList:: insert(int val,int pos)
{
	int k=1;
	Node *current=head;
	Node * prev=NULL;
	Node * newNode=new Node(val);
	if(head==NULL)
	{
		head=newNode;
		cout<<"here";
	}
	else if(pos==1)
	{
		newNode->setNext(head);
		head=newNode;
	
	}
	else
	{
		while(pos>k && current!=NULL)
		{
			k++;
			prev=current;
			current=current->getNext();
		}
		
		newNode->setNext(prev->getNext());
		prev->setNext(newNode);
	
	}
}
void LinkedList:: TraverseLL()
{
	Node * current=new Node();
	current=head;
	if(head==NULL)
	{
		cout<<"Empty List!!";
		return;
	
	}
	while(current!=NULL)
	{
		cout<<"node="<<current->getValue()<<endl;
		current=current->getNext();
	
	}
}
void LinkedList::MergeSort(Node **head)
{
	Node ** a,** b;
	if(*head==NULL ||(*head)->getNext()==NULL)
	return ;
	splitList(*head,a,b);
	MergeSort(a);
	MergeSort(b);
	*head=mergeList(*a,*b);
	
	
}
void LinkedList:: splitList(Node *head,Node ** a,Node ** b)
{
	Node *slowptr=head,*fastptr=head;
	int i=0;
	while(fastptr->getNext()!=NULL)
	{
		if(i==0)
		{
			
			fastptr=fastptr->getNext();
			i=1;
		}
		if(i==1)
		{
			slowptr=slowptr->getNext();
			fastptr=fastptr->getNext();
			i=0;	
		
		}
	
	}
	a=&head;
	b=&slowptr;
	
}
Node * LinkedList::mergeList(Node *a,Node *b)
{
	Node *result=NULL;
	if(a==NULL)
	return b;
	if(b==NULL)
	return a;
	if(a->getValue()<b->getValue())
	{
		result=a;
		result->setNext(mergeList(a->getNext(),b));
	
	}
	else if(a->getValue()>b->getValue())
	{
		result=b;
		result->setNext(mergeList(a,b->getNext()));
	
	}
	return result;

}
main()
{
	LinkedList ll;
	Node **a,**b;
	ll.insert(5,1);
	ll.insert(6,2);
	ll.insert(4,1);
	ll.insert(7,4);
	ll.insert(8,5);
	ll.insert(9,6);
	ll.insert(5,6);
	ll.insert(4,7);
	ll.insert(4,6);
	ll.insert(5,3);
	ll.insert(9,2);
	ll.TraverseLL();
	Node **c= &ll.getHead();
	//Node *c=ll.getHead();
	ll.MergeSort(&c);
	//ll.setHead(*c);
	//ll.splitList(ll.getHead(),a,b);
	ll.TraverseLL();
}	
